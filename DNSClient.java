import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

/**
 * Some parts of this script are referenced from an example Stackoverflow post:
 * https://stackoverflow.com/questions/36743226/java-send-udp-packet-to-dns-server/39375234#
 * https://docs.oracle.com/javase/7/docs/api/
 * https://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayInputStream.html
 */

public class DNSClient {
    // google's DNS server
    private static final String DNS_SERVER_ADDRESS = "8.8.8.8";
    //Messages sent using UDP user server port 53 (decimal)
    private static final int DNS_SERVER_PORT = 53;

    public static void main(String[] args) throws IOException {

        int firstArg;
        if (args.length > 0) {
            try {
                String domain = args[0];
            } catch (NumberFormatException e) {
                System.err.println("Argument" + args[0] + " must be an integer.");
                System.exit(1);
            }
        }

        String domain = "aviary.cs.umanitoba.ca";

        InetAddress ipAddress = InetAddress.getByName(DNS_SERVER_ADDRESS);

        ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();
        DataOutputStream dataOutputVar = new DataOutputStream(byteOutputStream);

        // *** Build a DNS Request Frame ****

        // Identifier: A 16-bit identification field generated by the device that creates the DNS query.
        // It is copied by the server into the response, so it can be used by that device to match that
        // query to the corr=esponding reply received from a DNS server. This is used in a manner similar
        // to how the Identifier field is used in many of the ICMP message types.
        dataOutputVar.writeShort(0x5678);

        // Write Query Flags
        // 0    0000    0    0   1   0   000  0000
        // qr   opcode  aa  tc   rd  ra  z    rcode
        dataOutputVar.writeShort(0x0100);

        // Question Count: Specifies the number of questions in the Question section of the message.
        dataOutputVar.writeShort(0x0001);

        // Answer Record Count: Specifies the number of resource records in the Answer section of the message.
        dataOutputVar.writeShort(0x0000);

        // Authority Record Count: Specifies the number of resource records in the Authority section of
        // the message. (“NS” stands for “name server”)
        dataOutputVar.writeShort(0x0000);

        // Additional Record Count: Specifies the number of resource records in the Additional section of the message.
        dataOutputVar.writeShort(0x0000);

        String[] urlString = domain.split("\\.");

        for (int i = 0; i<urlString.length; i++) {
            byte[] dBytes = urlString[i].getBytes("UTF-8");
            dataOutputVar.writeByte(dBytes.length);
            dataOutputVar.write(dBytes);
        }

        // No more parts
        dataOutputVar.writeByte(0x00);

        //Question section format
        // Type 0x01 = A (Host Request)
        // QTYPE: Host Request
        dataOutputVar.writeShort(0x0001);

        // Class 0x01 = IN
        // IN for the Internet
        dataOutputVar.writeShort(0x0001);

        byte[] dnsFrame = byteOutputStream.toByteArray();
        System.out.println("Sending: " + dnsFrame.length + " bytes");
        for (int i =0; i< dnsFrame.length; i++) {
            System.out.print("0x" + String.format("%x", dnsFrame[i]) + " " );
        }

        // DNS socket
        DatagramSocket socket = new DatagramSocket();
        DatagramPacket dnsReqPacket = new DatagramPacket(dnsFrame, dnsFrame.length, ipAddress, DNS_SERVER_PORT);
        socket.send(dnsReqPacket);
        // Await response from DNS server
        byte[] buf = new byte[1024];
        DatagramPacket packet = new DatagramPacket(buf, buf.length);
        socket.receive(packet);
        byte x = (byte)(buf[2] & 0x80);
        if (x == (byte) 0x80){
            System.out.println("Response");
        }
        byte y = (byte)(buf[3] & 0x80);
        if(y == (byte) 0x80){
            System.out.println("Recursive Query - recursion available at the server");
        }
        else if (y == (byte) 0x00){
            System.out.println("Recursion not available");
        }
        byte z = (byte)(buf[3] & 0x0f);
        if (z == (byte) 0x00){
            System.out.println("No error condition");
        }
        else if (z == (byte) 0x01){
            System.out.println("Format error - The name server was unable to interpret the query");
        }
        else if (z == (byte) 0x02){
            System.out.println("Server failure - the name server was unable to process query due to problem with name server");
        }
        else if(z == (byte) 0x03){
            System.out.println("Name Error");
        }
        else if(z == (byte) 0x04){
            System.out.println("Not implemented");
        }
        else if(z == (byte) 0x05){
            System.out.println("The name server refuses to perform the specified operation for policy reasons");
        }
        // num answers
        short b = (short)( ((buf[6] & 0xff) << 8 | (buf[7] & 0xff) ));
        System.out.println("The number of answers in the answers field are: " + b);
        byte nxtStart = buf[12];
        int cont = 12;
        while (nxtStart != (byte)0x00){
            nxtStart = buf[cont];
            cont += 1;
        }
        cont += 4;
        // finish query
        System.out.println( "cont "+cont);
        int numberOfIPs = 0;
        for (int a = 0; a < b; a++){
            System.out.println(cont);
            while( (buf[cont] != (byte)0x00) && ((buf[cont] & (byte)0xc0) != (byte)0xc0)  ){
                cont+=1;
            }
            if (((buf[cont] & (byte)0xc0) == (byte)0xc0))
                cont+=2;


            System.out.println( "type "+cont);
//
//            System.out.println( "type "+buf[cont]);
            short type = (short)( buf[cont] << 8 | buf[cont+1]);
            System.out.println( "type "+type);
            if (type == 1){
                numberOfIPs++;
                System.out.println("find a ip");
            }
            cont += 8;
            short rdlength = (short)( buf[cont] << 8 | buf[cont+1]);
            System.out.println( "rdlength "+rdlength);


            if (type ==1){
                cont+=2;
                for (int i = 1 ;i <= rdlength; i++) {
                int g = buf[cont] & 0xFF;
                System.out.print(String.format("%d.", g));
                cont=cont+1;
                }
            }else{
                cont += rdlength;
                cont+=2;
            }
        }
        System.out.println("number of ips are "+numberOfIPs);

    }
}